{"version":3,"sources":["node_modules/browser-pack/_prelude.js","btrfs.ts","common.ts","logger.ts","snapshotsSizeGui.ts"],"names":[],"mappings":"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","file":"snapshotsSizeGui.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\nimport * as path from 'path';\nimport * as moment from 'moment';\nimport Log from './logger';\nimport * as common from './common';\n\nexport const config = {  // NB: exported variables are constants => Need a container ; cf. https://github.com/Microsoft/TypeScript/issues/6751\n\tuseSudo : false,\n};\nexport const formats = {\n\tsnapshot : '{NAME}_{TAG}',\n\tbackup : {\n\t\tfull\t\t: '{NAME}_{TAG}.full.btrfs.xz',\n\t\tfullgz\t\t: '{NAME}_{TAG}.full.btrfs.gz',  // nb: legacy format\n\t\tpartial\t\t: '{NAME}_{PARENT_TAG}_{TAG}.btrfs.xz',\n\t\tpartialgz\t: '{NAME}_{PARENT_TAG}_{TAG}.btrfs.gz',  // nb: legacy format\n\t\tpartialIdxs : {\n\t\t\ttag\t\t: 2,\n\t\t\tparent\t: 1,\n\t\t}\n\t},\n};\nconst commands = {\n\tfishow : \"btrfs filesystem show '{MOUNTPOINT}'\",\n\tdriveName : \"lsblk -no pkname {DEVICEPATH}\",  // Returns the name of the drive containing the specified partition ; e.g. for DEVICEPATH='/dev/sda1' => will return 'sda'\n\tbalance : {\n\t\tcomplete\t: \"btrfs balance start '{MOUNTPOINT}'\",\n\t\tfast\t\t: \"btrfs balance start -dusage=50 -musage=50 '{MOUNTPOINT}'\",\n\t\tfastpartial\t: \"btrfs balance start -dusage=50 -musage=50 -dlimit=3 -mlimit=3 '{MOUNTPOINT}'\",\n\t},\n\tscrub : \"btrfs scrub start '{MOUNTPOINT}'\",\n\tsnapshot : {\n\t\tcreate\t: \"btrfs subvolume snapshot -r '{SRC}' '{DST}'\",\n\t\tdelete\t: \"btrfs subvolume delete '{SUBVOLUME}'\",\n\t\tsend\t: {\n\t\t\tdirect\t: {\n\t\t\t\tregular : \"btrfs send '{SRC}' | btrfs receive '{DST_DIR}'\",\n\t\t\t\tsudo\t: \"sudo btrfs send '{SRC}' | sudo btrfs receive '{DST_DIR}'\",\n\t\t\t},\n\t\t\tparent\t: {\n\t\t\t\tregular\t: \"btrfs send -p '{PARENT}' '{SRC}' | btrfs receive '{DST_DIR}'\",\n\t\t\t\tsudo\t: \"sudo btrfs send -p '{PARENT}' '{SRC}' | sudo btrfs receive '{DST_DIR}'\",\n\t\t\t},\n\t\t},\n\t},\n\tsnapshotSize : {\n\t\tregular\t: \"btrfs send -p '{PARENT}' '{CHILD}' | wc --bytes\",\n\t\tsudo\t: \"sudo btrfs send -p '{PARENT}' '{CHILD}' | wc --bytes\",\n\t},\n\tbackup : {\n\t\tfull : {\n\t\t\tdirect : {\n\t\t\t\tregular\t: \"btrfs send '{SRC}' | xz -T0 -c -3 > '{DST_FILE}'\",\n\t\t\t\tsudo\t: \"sudo btrfs send '{SRC}' | xz -T0 -c -3 | sudo tee '{DST_FILE}' > /dev/null\",\n\t\t\t},\n\t\t\ttee : {\n\t\t\t\tregular\t: \"btrfs send '{SRC}' | xz -T0 -c -3 | tee '{DST_FILE}' | xz -d | btrfs receive '{DST_SNAP_DIR}'\",\n\t\t\t\tsudo\t: \"sudo btrfs send '{SRC}' | xz -T0 -c -3 | sudo tee '{DST_FILE}' | xz -d | sudo btrfs receive '{DST_SNAP_DIR}'\",\n\t\t\t},\n\t\t},\n\t\tpartial : {\n\t\t\tdirect : {\n\t\t\t\tregular\t: \"btrfs send -p '{PARENT}' '{SRC}' | xz -T0 -c -3 > '{DST_FILE}'\",\n\t\t\t\tsudo\t: \"sudo btrfs send -p '{PARENT}' '{SRC}' | xz -T0 -c -3 | sudo tee '{DST_FILE}' > /dev/null\",\n\t\t\t},\n\t\t\ttee : {\n\t\t\t\tregular\t: \"btrfs send -p '{PARENT}' '{SRC}' | xz -T0 -c -3 | tee '{DST_FILE}' | xz -d | btrfs receive '{DST_SNAP_DIR}'\",\n\t\t\t\tsudo\t: \"sudo btrfs send -p '{PARENT}' '{SRC}' | xz -T0 -c -3 | sudo tee '{DST_FILE}' | xz -d | sudo btrfs receive '{DST_SNAP_DIR}'\",\n\t\t\t},\n\t\t},\n\t},\n};\n\n/** List the drives used by a filesystem's pool */\nexport async function getPoolDrives(p:{ log:Log, mountPoint:string, diskNameOnly?:boolean }) : Promise<string[]>\n{\n\tp.log.log( 'Start' );\n\tconst {stdout} = await common.run({ log:p.log, command:(config.useSudo?'sudo ':'')+commands.fishow, 'MOUNTPOINT':p.mountPoint });\n\tconst lines = stdout.split( /\\r?\\n\\r?/ );\n\n\tlet drives : string[] = [];\n\tfor( const line of lines )\n\t{\n\t\tif(! line.trimLeft().startsWith('devid') )\n\t\t\t// Not device listing line\n\t\t\tcontinue;\n\t\tconst tokens = line.split( ' ' );\n\t\tdrives.push( tokens[tokens.length-1] );  // Last token of the line is the drive name\n\t}\n\n\tif( (p.diskNameOnly == true) )\n\t{\n\t\t// If partitions are used, get the name of the drives containing those partitions  (e.g. '/dev/sda1' => 'sda')\n\t\tconst tasks = drives.map( async devicePath=>\n\t\t\t{\n\t\t\t\tconst {stdout} = await common.run({ log:p.log.child(`lsblk_${path.basename(devicePath)}`), command:(config.useSudo?'sudo ':'')+commands.driveName, 'DEVICEPATH':devicePath })\n\t\t\t\treturn stdout.trim();\n\t\t\t} );\n\t\tdrives = await Promise.all( tasks );\n\t}\n\telse\n\t{\n\t\t// Extract the device name from the paths (e.g. '/dev/sda1' => 'sda1')\n\t\tdrives = drives.map( v=>path.basename(v) );\n\t}\n\n\tp.log.log( 'End' );\n\treturn drives;\n}\n\nexport async function balance(p:{ log:Log, type:'complete'|'fast'|'fastpartial', mountPoint:string }) : Promise<void>\n{\n\tp.log.log( 'Start' );\n\tawait common.run({ log:p.log, command:(config.useSudo?'sudo ':'')+commands.balance[p.type], 'MOUNTPOINT':p.mountPoint });\n\tp.log.log( 'End' );\n}\n\nexport async function scrub(p:{ log:Log, mountPoint:string }) : Promise<void>\n{\n\tp.log.log( 'Start' );\n\tawait common.run({ log:p.log, command:(config.useSudo?'sudo ':'')+commands.scrub, 'MOUNTPOINT':p.mountPoint });\n\tp.log.log( 'End' );\n}\n\nexport async function snapshotCreate(p:{ log:Log, name:string, srcSubvolume:string, dstDirectory:string }) : Promise<{name:string,path:string}>\n{\n\tp.log.log( 'Start' );\n\tconst dstName = formats.snapshot.replace( '{NAME}', p.name ).replace( '{TAG}', common.TAG );\n\tconst dstPath = path.join( p.dstDirectory, dstName );\n\tawait common.run({ log:p.log, command:(config.useSudo?'sudo ':'')+commands.snapshot.create, 'SRC':p.srcSubvolume, 'DST':dstPath });\n\tp.log.log( 'End' );\n\treturn { name:dstName, path:dstPath };\n}\n\nexport async function snapshotDelete(p:{ log:Log, subvolume:string, dir?:string }) : Promise<void>\n{\n\tp.log.log( 'Start' );\n\tlet subvolume = p.subvolume;\n\tif( p.dir != null )\n\t\tsubvolume = path.join( p.dir, subvolume );\n\tawait common.run({ log:p.log, command:(config.useSudo?'sudo ':'')+commands.snapshot.delete, 'SUBVOLUME':subvolume });\n\tp.log.log( 'End' );\n}\n\nexport async function snapshotSize(p:{ log:Log, parent:SnapshotEntry, child:SnapshotEntry }) : Promise<number>\n{\n\tp.log.log( 'Start' );\n\n\tconst parentDir = path.join( p.parent.containerDir, p.parent.subvolumeName );\n\tconst childDir = path.join( p.child.containerDir, p.child.subvolumeName );\n\tconst command = ( config.useSudo ? commands.snapshotSize.sudo : commands.snapshotSize.regular );\n\tconst { stdout } = await common.run({ log:p.log.child('run'), command:command, 'PARENT':parentDir, 'CHILD':childDir });\n\tp.log.log( 'Parse int' );\n\tconst bytes = parseInt( stdout );\n\n\tp.log.log( 'End' );\n\treturn bytes;\n}\n\nexport async function send(p:{ log:Log, snapshot:SnapshotEntry, parent?:SnapshotEntry, destinationDir:string }) : Promise<void>\n{\n\tp.log.log( 'Start' );\n\tconst srcSubvolume = path.join( p.snapshot.containerDir, p.snapshot.subvolumeName );\n\n\tif( p.parent == null )\n\t{\n\t\tp.log.log( 'Send full snapshot', p.snapshot.subvolumeName );\n\t\tawait common.run({ log:p.log, command:(config.useSudo?commands.snapshot.send.direct.sudo:commands.snapshot.send.direct.regular), 'SRC':srcSubvolume, 'DST_DIR':p.destinationDir });\n\t}\n\telse\n\t{\n\t\tp.log.log( 'Send partial snapshot', p.snapshot.subvolumeName );\n\t\tconst parentSubvolume = path.join( p.parent.containerDir, p.parent.subvolumeName );\n\t\tawait common.run({ log:p.log, command:(config.useSudo?commands.snapshot.send.parent.sudo:commands.snapshot.send.parent.regular), 'SRC':srcSubvolume, 'PARENT':parentSubvolume, 'DST_DIR':p.destinationDir });\n\t}\n\n\tp.log.log( 'End' );\n}\n\nexport async function backupCreate(p:{ log:Log, snapshot:SnapshotEntry, parent?:SnapshotEntry, backupDestinationDir:string, subvolumeDestinationDir?:string }) : Promise<void>\n{\n\tp.log.log( 'Start' );\n\tlet command : string;\n\tlet parentSubvolume : string|null;\n\tlet dstFilePath : string;\n\tif( p.parent == null )\n\t{\n\t\tconst dstFileName = formats.backup.full.replace( '{NAME}', p.snapshot.baseName ).replace( '{TAG}', p.snapshot.tag );\n\t\tdstFilePath = path.join( p.backupDestinationDir, dstFileName );\n\t\tparentSubvolume = null;\n\t\tp.log.log( 'Create full backup', dstFilePath );\n\t\tif( p.subvolumeDestinationDir == null )\n\t\t{\n\t\t\tif( config.useSudo )\n\t\t\t\tcommand = commands.backup.full.direct.sudo;\n\t\t\telse\n\t\t\t\tcommand = commands.backup.full.direct.regular;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif( config.useSudo )\n\t\t\t\tcommand = commands.backup.full.tee.sudo;\n\t\t\telse\n\t\t\t\tcommand = commands.backup.full.tee.regular;\n\t\t}\n\t}\n\telse\n\t{\n\t\tconst dstFileName = formats.backup.partial.replace( '{NAME}', p.snapshot.baseName ).replace( '{PARENT_TAG}', p.parent.tag ).replace( '{TAG}', p.snapshot.tag );\n\t\tdstFilePath = path.join( p.backupDestinationDir, dstFileName );\n\t\tparentSubvolume = path.join( p.parent.containerDir, p.parent.subvolumeName );\n\t\tp.log.log( 'Create partial backup', dstFilePath );\n\t\tif( p.subvolumeDestinationDir == null )\n\t\t{\n\t\t\tif( config.useSudo )\n\t\t\t\tcommand = commands.backup.partial.direct.sudo;\n\t\t\telse\n\t\t\t\tcommand = commands.backup.partial.direct.regular;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif( config.useSudo )\n\t\t\t\tcommand = commands.backup.partial.tee.sudo;\n\t\t\telse\n\t\t\t\tcommand = commands.backup.partial.tee.regular;\n\t\t}\n\t}\n\n\tif( p.snapshot.remoteServer != null )\n\t\tcommand = `ssh \"${p.snapshot.remoteServer}\" ${command}`;\n\n\tconst subvolume = path.join( p.snapshot.containerDir, p.snapshot.subvolumeName );\n\tawait common.run({ log:p.log, command, 'SRC':subvolume, 'PARENT':parentSubvolume, 'DST_FILE':dstFilePath, 'DST_SNAP_DIR':p.subvolumeDestinationDir });\n\tp.log.log( 'End' );\n}\n\nexport async function listSnapshots(p:{ log:Log, name:string, dir:string, remoteServer?:string }) : Promise<{first?:SnapshotEntry,last?:SnapshotEntry,list:SnapshotEntry[]}>\n{\n\tconst remoteServer = p.remoteServer == null ? undefined : p.remoteServer;\n\tconst pattern = formats.snapshot.replace( '{NAME}', p.name ).replace( '{TAG}', common.tagPattern );\n\tconst subvolumes = await common.dirPattern({ log:p.log, dir:p.dir, pattern:pattern, remoteServer });\n\tsubvolumes.sort();  // NB: Sort so dates can be evaluated chronologically\n\n\tconst regexPattern = formats.snapshot.replace( '{NAME}', p.name ).replace( '{TAG}', '('+('.'.repeat(common.tagFormat.length))+')' );\n\tconst regexp = new RegExp( regexPattern );\n\tlet lastYear=0, lastMonth=0, lastDay=0, lastHour=0;\n\tconst currentYear\t= parseInt( common.NOW.format('YYYY') );\n\tconst currentMonth\t= parseInt( common.NOW.format('YYYYMM') );\n\tconst currentDay\t= parseInt( common.NOW.format('YYYYMMDD') );\n\tconst currentHour\t= parseInt( common.NOW.format('YYYYMMDDHH') );\n\tconst list = subvolumes.map( (subvolume,i)=>\n\t\t{\n\t\t\tconst tag\t= subvolume.replace( regexp, '$1' );\n\t\t\tconst date\t= moment( tag, common.tagFormat );\n\t\t\tconst year\t= date.year();\n\t\t\tconst month\t= parseInt( date.format('YYYYMM') );\n\t\t\tconst day\t= parseInt( date.format('YYYYMMDD') );\n\t\t\tconst hour\t= parseInt( date.format('YYYYMMDDHH') );\n\t\t\tvar e = new SnapshotEntry({\tbaseName\t\t: p.name,\n\t\t\t\t\t\t\t\t\t\tsubvolumeName\t: subvolume,\n\t\t\t\t\t\t\t\t\t\tremoteServer\t: remoteServer,\n\t\t\t\t\t\t\t\t\t\tcontainerDir\t: p.dir,\n\t\t\t\t\t\t\t\t\t\ttag\t\t\t\t: tag,\n\t\t\t\t\t\t\t\t\t\tdate\t\t\t: date,\n\t\t\t\t\t\t\t\t\t\tdiffYears\t\t: common.NOW.diff( date, 'years' ),\n\t\t\t\t\t\t\t\t\t\tdiffMonths\t\t: common.NOW.diff( date, 'months' ),\n\t\t\t\t\t\t\t\t\t\tdiffDays\t\t: common.NOW.diff( date, 'days' ),\n\t\t\t\t\t\t\t\t\t\tdiffHours\t\t: common.NOW.diff( date, 'hours' ),\n\t\t\t\t\t\t\t\t\t\tfirstOfYear\t\t: ( lastYear < year ),\n\t\t\t\t\t\t\t\t\t\tfirstOfMonth\t: ( lastMonth < month ),\n\t\t\t\t\t\t\t\t\t\tfirstOfDay\t\t: ( lastDay < day ) });\n\t\t\tlastYear\t= year;\n\t\t\tlastMonth\t= month;\n\t\t\tlastDay\t\t= day;\n\t\t\tlastHour\t= hour;\n\t\t\treturn e;\n\t\t} );\n\n\tlet first : SnapshotEntry|undefined = undefined;\n\tlet last : SnapshotEntry|undefined = undefined;\n\tif( list.length > 0 )\n\t{\n\t\tfirst = list[0];\n\t\tlast = list[ list.length-1 ];\n\t}\n\treturn { first, last, list };\n}\n\nexport async function listBackups(p:{ log:Log, name:string, dir:string, remoteServer?:string }) : Promise<{ last:BackupEntry, lastFull?:BackupEntry, list:BackupEntry[] }>\n{\n\t// Search for full & partial backups files\n\tconst patternFull = formats.backup.full.replace( '{NAME}', p.name ).replace( '{TAG}', common.tagPattern );\n\tconst patternFullgz = formats.backup.fullgz.replace( '{NAME}', p.name ).replace( '{TAG}', common.tagPattern );\n\tconst patternPartial = formats.backup.partial.replace( '{NAME}', p.name ).replace( '{TAG}', common.tagPattern ).replace( '{PARENT_TAG}', common.tagPattern );\n\tconst patternPartialgz = formats.backup.partialgz.replace( '{NAME}', p.name ).replace( '{TAG}', common.tagPattern ).replace( '{PARENT_TAG}', common.tagPattern );\n\tconst listOfListOfFiles = await Promise.all([\n\t\t\t\t\t\t\tcommon.dirPattern({ log:p.log.child('full'), dir:p.dir, pattern:patternFull, remoteServer:p.remoteServer }),\n\t\t\t\t\t\t\tcommon.dirPattern({ log:p.log.child('fullgz'), dir:p.dir, pattern:patternFullgz, remoteServer:p.remoteServer }),\n\t\t\t\t\t\t\tcommon.dirPattern({ log:p.log.child('partial'), dir:p.dir, pattern:patternPartial, remoteServer:p.remoteServer }),\n\t\t\t\t\t\t\tcommon.dirPattern({ log:p.log.child('partialgz'), dir:p.dir, pattern:patternPartialgz, remoteServer:p.remoteServer }),\n\t\t\t\t\t\t]);\n\tconst files = <{name:string,size:number}[]>Array.prototype.concat.apply( [], listOfListOfFiles ).map( name=>({ name, size:0 }) );\n\n\t// Get file sizes\n\tif( p.remoteServer != null )\n\t{\n\t\t//throw 'NYI: Getting remote file sizes is not yet implemented';\n\t}\n\telse\n\t{\n\t\tawait common.forEach( files, async file=>\n\t\t\t{\n\t\t\t\tfile.size = ( await common.stat({ dir:p.dir, name:file.name }) ).size;\n\t\t\t} );\n\t}\n\n\treturn createBackupsList({ log:p.log, name:p.name, containerDir:p.dir, remoteServer:p.remoteServer, files });\n}\n\nexport async function createBackupsList(p:{ log:Log, name:string, files:{name:string,size:number}[], containerDir:string, remoteServer?:string }) : Promise<{ last:BackupEntry, lastFull?:BackupEntry, list:BackupEntry[] }>\n{\n\tconst remoteServer\t= p.remoteServer??undefined;\n\tconst containerDir\t= p.containerDir;\n\n\tconst regexps = [\n\t\t\t\t\t\t{ pattern:formats.backup.full\t\t, isPartial:false },\n\t\t\t\t\t\t{ pattern:formats.backup.fullgz\t\t, isPartial:false },\n\t\t\t\t\t\t{ pattern:formats.backup.partial\t, isPartial:true },\n\t\t\t\t\t\t{ pattern:formats.backup.partialgz\t, isPartial:true },\n\t\t\t\t\t].map( item=>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst patternName = p.name.replace( /\\./g, '\\\\.' );\n\t\t\t\t\t\t\tlet pattern = item.pattern\t.replace( /\\./g, '\\\\.' )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.replace( '{NAME}', patternName )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.replace( '{TAG}', `(${common.tagPatternRegex})` );\n\t\t\t\t\t\t\tif( item.isPartial )\n\t\t\t\t\t\t\t\tpattern = pattern\t\t.replace( '{PARENT_TAG}', `(${common.tagPatternRegex})` );\n\t\t\t\t\t\t\treturn {\tregex:new RegExp( pattern ),\n\t\t\t\t\t\t\t\t\t\tisPartial:item.isPartial };\n\t\t\t\t\t\t} );\n\tconst files = p.files\t.map( file=>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfor( const item of regexps )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tconst match = file.name.match( item.regex );\n\t\t\t\t\t\t\t\t\t\tif( match == null )\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t\t\t\t\tif(! item.isPartial )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\treturn {\tname\t\t: file.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize\t\t: file.size,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tisFull\t\t: true,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttag\t\t\t: match[1],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tparentTag\t: <string|undefined>undefined };\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse // !isPartial\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\treturn {\tname\t\t: file.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize\t\t: file.size,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tisFull\t\t: false,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttag\t\t\t: match[formats.backup.partialIdxs.tag],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tparentTag\t: match[formats.backup.partialIdxs.parent] };\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Not using this file\n\t\t\t\t\t\t\t\t\treturn null!;\n\t\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t.filter( v=>v != null );\n\tfiles.sort( (a,b)=>  // NB: Sort so dates can be evaluated chronologically\n\t\t{\n\t\t\treturn a.name < b.name ? -1 : 1;\n\t\t} );\n\n\tconst list : BackupEntry[] = [];\n\tlet last : BackupEntry = undefined!;\n\tlet lastFull : BackupEntry|undefined = undefined;\n\tlet currentFullNumber : number = 0;\n\tfor( let i=0; i<files.length; ++i )\n\t{\n\t\tconst file = files[i];\n\t\tlet fullNumber : number;\n\t\tlet parent : BackupEntry|undefined;\n\t\tlet sizeCumulated : number;\n\t\tif( file.isFull )\n\t\t{\n\t\t\tfullNumber = ( ++ currentFullNumber );\n\t\t\tparent = undefined;\n\t\t\tsizeCumulated = file.size;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent = list.find( (e)=>e.tag == file.parentTag );\n\t\t\tif( parent == null )\n\t\t\t\t// NB: Should already exist in the list since 'files' should be sorted chronologically\n\t\t\t\tthrow \"Could not find parent backup for '\"+file.name+\"'\";\n\n\t\t\tfullNumber = parent.fullNumber;\n\n\t\t\tif( parent.parent == null )\n\t\t\t\t// Parent is full backup\n\t\t\t\tsizeCumulated = file.size;\n\t\t\telse\n\t\t\t\tsizeCumulated = parent.sizeCumulated! + file.size;\n\t\t}\n\n\t\tconst date\t= moment( file.tag, common.tagFormat );\n\t\tconst e = new BackupEntry({\tbaseName\t\t: p.name,\n\t\t\t\t\t\t\t\t\tbackupName\t\t: file.name,\n\t\t\t\t\t\t\t\t\tremoteServer\t: remoteServer,\n\t\t\t\t\t\t\t\t\tcontainerDir\t: containerDir,\n\t\t\t\t\t\t\t\t\ttag\t\t\t\t: file.tag,\n\t\t\t\t\t\t\t\t\tdate\t\t\t: date,\n\t\t\t\t\t\t\t\t\tdiffYears\t\t: common.NOW.diff( date, 'years' ),\n\t\t\t\t\t\t\t\t\tdiffMonths\t\t: common.NOW.diff( date, 'months' ),\n\t\t\t\t\t\t\t\t\tdiffDays\t\t: common.NOW.diff( date, 'days' ),\n\t\t\t\t\t\t\t\t\tdiffHours\t\t: common.NOW.diff( date, 'hours' ),\n\t\t\t\t\t\t\t\t\tparent\t\t\t: parent,\n\t\t\t\t\t\t\t\t\tsize\t\t\t: file.size,\n\t\t\t\t\t\t\t\t\tsizeCumulated\t: sizeCumulated,\n\t\t\t\t\t\t\t\t\tfullNumber\t\t: fullNumber });\n\t\tlist.push( e );\n\t\tif( file.isFull )\n\t\t\tlastFull = e;\n\t\tlast = e;\n\t}\n\n\tfor( let i=0; i<files.length; ++i )\n\t{\n\t\tconst entry = list[i];\n\n\t\t// Inverse entry.fullNumber (NB: +hack for 'readonly')\n\t\t(<any>entry.fullNumber) = currentFullNumber - entry.fullNumber + 1;\n\t}\n\n\treturn { last, lastFull, list };\n}\n\nabstract class BaseEntry\n{\n\tpublic readonly\tbaseName\t\t: string;\n\tpublic readonly\tremoteServer?\t: string;\n\tpublic readonly\tcontainerDir\t: string;\n\tpublic readonly\ttag\t\t\t\t: string;\n\tpublic readonly\tdate\t\t\t: moment.Moment;\n\tpublic readonly\tdiffYears\t\t: number;\n\tpublic readonly\tdiffMonths\t\t: number;\n\tpublic readonly\tdiffDays\t\t: number;\n\tpublic readonly\tdiffHours\t\t: number;\n}\nexport class SnapshotEntry extends BaseEntry\n{\n\tpublic readonly subvolumeName\t: string;\n\tpublic readonly\tfirstOfYear\t\t: boolean;\n\tpublic readonly\tfirstOfMonth\t: boolean;\n\tpublic readonly\tfirstOfDay\t\t: boolean;\n\n\tpublic constructor(init?:SnapshotEntry)\n\t{\n\t\tsuper();\n\t\tObject.assign( this, init );\n\t}\n}\nexport class BackupEntry extends BaseEntry\n{\n\tpublic readonly backupName\t\t: string;\n\n\tpublic readonly parent?\t\t\t: BackupEntry;\n\tpublic readonly size\t\t\t: number;\n\tpublic readonly sizeCumulated\t: number;\n\tpublic readonly fullNumber\t\t: number;\n\n\tpublic constructor(init?:BackupEntry)\n\t{\n\t\tsuper();\n\t\tObject.assign( this, init );\n\t}\n}\n","\nimport * as process from 'process';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { exec } from 'child_process';\nimport * as glob from 'glob';\nimport * as http from 'http';\nimport * as https from 'https';\nimport * as moment from 'moment';\nimport * as JSON5 from 'json5';\nimport Log from './logger';\n\nexport var NOW : moment.Moment;\nexport var TAG : string;\nexport var hasErrors : boolean = false;\nexport const tagFormat =  'YYYYMMDD_HHmm';\nexport const tagPattern = '????????_????';\nexport const tagPatternRegex = '[0-9]{8}_[0-9]{4}';\n\nexport function init(p:{log:Log, tag?:string}) : void\n{\n\tTAG =  ( (p.tag != null) ? p.tag : moment(new Date()).format(tagFormat) );\n\tNOW = moment( TAG, tagFormat );  // NB: 'NOW' is trimmed of the 'seconds' part\n\tp.log.log( 'TAG:', TAG, NOW.toISOString() );\n\n\tlet exitHandler = function(options,err)\n\t\t{\n\t\t\tp.log.output();\n\t\t\tswitch( options.mode )\n\t\t\t{\n\t\t\t\tcase \"on exit\":\n\t\t\t\t\tif( hasErrors )\n\t\t\t\t\t\tprocess.exit( -1 );\n\t\t\t\t\treturn;\n\t\t\t\tcase \"on uncaughtException\":\n\t\t\t\t\tconsole.log( '*** uncaughtException', err );\n\t\t\t\t\tprocess.exit( -1 );\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.log( '*** Unknown exit mode', options, err );\n\t\t\t\t\tprocess.exit( -1 );\n\t\t\t}\n\t\t};\n\tprocess.on( 'exit', exitHandler.bind(null, {mode:'on exit'}) );\n\tprocess.on( 'uncaughtException', exitHandler.bind(null,{mode:'on uncaughtException'}) );\n\n\tif( typeof(window) === 'undefined' )\n\t{\n\t\tp.log.log( 'In NodeJS application => set up a fake DOM/JQuery/Knockout environment' );\n\t\t// https://stackoverflow.com/questions/1801160/can-i-use-jquery-with-node-js\n\t\tconst jsdom = require( 'jsdom' );\n\t\tconst jquery = require( 'jquery' );\n\t\tconst knockout = require( 'knockout' );\n\t\tconst dom = new jsdom.JSDOM( '<html><body></body></html>' );\n\n\t\t(<any>global).window = dom.window;\n\t\t(<any>global).document = dom.window.document;\n\t\t(<any>global).$ = jquery( window );\n\t\t(<any>global).ko = knockout;\n\t}\n}\n\nexport function setHasErrors() : void\n{\n\thasErrors = true;\n}\n\nexport function sleep(ms:number) : Promise<void>\n{\n\treturn new Promise( callback=>setTimeout(callback, ms) );\n}\n\nexport function run(p:{ log:Log, command:string, logstds?:boolean, stdin?:string, [key:string]:any }) : Promise<{stdout:string,stderr:string}>\n{\n\tp.log.log( 'Create command' );\n\tlet command = p.command;\n\tObject.keys(p).forEach( function(key)\n\t\t{\n\t\t\tswitch( key )\n\t\t\t{\n\t\t\t\tcase 'log':\n\t\t\t\tcase 'command':\n\t\t\t\tcase 'logstds':\n\t\t\t\tcase 'stdin':\n\t\t\t\t\t// Regular parameter\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Command's parameter\n\t\t\tcommand = command.replace( '{'+key+'}', p[key] );\n\t\t});\n\n\tfunction logStds(stdout:string, stderr:string) : void\n\t{\n\t\tp.log.child( 'stdout' ).logLines( stdout );\n\t\tp.log.child( 'stderr' ).logLines( stderr );\n\t}\n\n\treturn new Promise<{stdout:string,stderr:string}>( function(resolve, reject)\n\t\t{\n\t\t\tp.log.log( 'launch:', command );\n\t\t\tconst ps = exec( command, function(err, stdout, stderr)\n\t\t\t\t{\n\t\t\t\t\tif( err != null )\n\t\t\t\t\t{\n\t\t\t\t\t\tlogStds( stdout, stderr );\n\t\t\t\t\t\treject( err );  // i.e. promise's 'throw'\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif( (p.logstds == null) || (p.logstds == true) )\n\t\t\t\t\t\tlogStds( stdout, stderr );\n\t\t\t\t\tp.log.log( 'exited' );\n\t\t\t\t\tresolve({ stdout:stdout, stderr:stderr });\n\t\t\t\t} );\n\t\t\tif( p.stdin != null )\n\t\t\t{\n\t\t\t\tp.log.log( `Write '${p.stdin.length}' characters to stdin` );\n\t\t\t\tconst rc = ps.stdin.write( p.stdin );\n\t\t\t\tps.stdin.end();\n\t\t\t\tp.log.log( `Write rc='${rc}'` );\n\t\t\t}\n\t\t} );\n}\n\nexport function ls(path:string) : Promise<string[]>\n{\n\treturn new Promise<string[]>( (resolve,reject)=>\n\t\t{\n\t\t\tfs.readdir( path, (err,items)=>\n\t\t\t\t{\n\t\t\t\t\tif( err != null )\n\t\t\t\t\t\treject( err );\n\t\t\t\t\telse\n\t\t\t\t\t\tresolve( items );\n\t\t\t\t} );\n\t\t} );\n}\n\nexport async function dirPattern(p:{ log:Log, dir:string, pattern:string, remoteServer?:string }) : Promise<string[]>\n{\n\tif( p.remoteServer == null )\n\t{\n\t\t// Simple local search\n\t\tp.log.log( 'Local search:', path.join(p.dir, p.pattern) );\n\t\treturn new Promise<string[]>( (resolve, reject)=>\n\t\t\t{\n\t\t\t\tglob.Glob( p.pattern, { cwd:p.dir }, (err,files)=>\n\t\t\t\t\t{\n\t\t\t\t\t\tif( err != null )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp.log.log( 'Error:', err );\n\t\t\t\t\t\t\treject( err );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// p.log.log( 'Found:', files );\n\t\t\t\t\t\t\tp.log.log( 'Found', files.length, 'entries' );\n\t\t\t\t\t\t\tresolve( files );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t} );\n\t}\n\telse\n\t{\n\t\t// Use SSH\n\t\tp.log.log( 'Remote search:', path.join(p.dir, p.pattern), 'on server', p.remoteServer );\n\n\t\ttry\n\t\t{\n\t\t\tconst dirPattern = path.join( p.dir, p.pattern );\n\t\t\tconst {stdout,stderr} = await run({ log:p.log, logstds:false, command:'ssh \"{HOSTNAME}\" ls -d \"{DIR_PATTERN}\"', 'HOSTNAME':p.remoteServer, 'DIR_PATTERN':dirPattern });\n\t\t\tconst list = stdout.split( '\\n' );\n\t\t\treturn list.map( str=>path.basename(str) ).filter( str=> (str != null) && (str.length > 0) );\n\t\t}\n\t\tcatch\n\t\t{\n\t\t\t// e.g. no such file or directory ...\n\t\t\treturn [];\n\t\t}\n\t}\n}\n\ntype DirNameOrPath = { path :string,\tdir?:never,\tname?:never }\n\t\t\t\t\t| { path?:never,\tdir :string,name :string };\nexport function stat(p:DirNameOrPath) : Promise<fs.Stats>\n{\n\tconst path_ = (p.path != null) ? p.path : path.join( p.dir, p.name );\n\treturn new Promise<fs.Stats>( (resolve,reject)=>\n\t\t{\n\t\t\tfs.stat( path_, (err, stats)=>\n\t\t\t\t{\n\t\t\t\t\tif( err )\n\t\t\t\t\t\treject( err );\n\t\t\t\t\telse\n\t\t\t\t\t\tresolve( stats );\n\t\t\t\t} )\n\t\t} );\n}\n\nexport function exists(p:DirNameOrPath) : Promise<boolean>\n{\n\tconst path_ = (p.path != null) ? p.path : path.join( p.dir, p.name );\n\treturn new Promise<boolean>( (resolve)=>\n\t\t{\n\t\t\tfs.stat( path_, (err, stats)=>\n\t\t\t\t{\n\t\t\t\t\tresolve( (err == null) ? true : false );\n\t\t\t\t} )\n\t\t} );\n}\n\nexport function mv(p:{ srcPath:string, dstPath:string }) : Promise<void>\n{\n\treturn new Promise<void>( (resolve,reject)=>\n\t\t{\n\t\t\tfs.rename( p.srcPath, p.dstPath, (err)=>\n\t\t\t\t{\n\t\t\t\t\t(err == null) ? resolve() : reject(err);\n\t\t\t\t} );\n\t\t} );\n}\n\nexport function mkdir(p:DirNameOrPath) : Promise<void>\n{\n\tconst path_ = (p.path != null) ? p.path : path.join( p.dir, p.name );\n\treturn new Promise<void>( (resolve,reject)=>\n\t\t{\n\t\t\tfs.mkdir( path_, (err)=>\n\t\t\t\t{\n\t\t\t\t\t(err == null) ? resolve() : reject(err);\n\t\t\t\t} );\n\t\t} )\n}\n\nexport function rm(p:DirNameOrPath) : Promise<void>\n{\n\tconst path_ = (p.path != null) ? p.path : path.join( p.dir, p.name );\n\treturn new Promise<void>( (resolve,reject)=>\n\t\t{\n\t\t\tfs.unlink( path_, (err)=>\n\t\t\t\t{\n\t\t\t\t\tif( err != null )\n\t\t\t\t\t\treject( err );\n\t\t\t\t\telse\n\t\t\t\t\t\tresolve();\n\t\t\t\t} );\n\t\t} );\n}\n\nexport function rmdir(p:DirNameOrPath) : Promise<void>\n{\n\tconst path_ = (p.path != null) ? p.path : path.join( p.dir, p.name );\n\treturn new Promise<void>( (resolve,reject)=>\n\t\t{\n\t\t\tfs.rmdir( path_, (err)=>\n\t\t\t\t{\n\t\t\t\t\t(err == null) ? resolve() : reject(err);\n\t\t\t\t} );\n\t\t} );\n}\n\nexport async function rmrf(p:DirNameOrPath) : Promise<void>\n{\n\tconst path_ = (p.path != null) ? p.path : path.join( p.dir, p.name );\n\tconst stat_ = await stat( p );\n\tif( stat_.isDirectory() )\n\t{\n\t\t// Directory\n\t\tconst items = await ls( path_ );\n\t\tfor( let i=0; i<items.length; ++i )\n\t\t{\n\t\t\t// Recurse\n\t\t\tconst item = items[ i ];\n\t\t\tawait rmrf({ dir:path_, name:item });\n\t\t}\n\n\t\t// This one\n\t\tawait rmdir( p );\n\t}\n\telse\n\t{\n\t\t// File\n\t\tawait rm( p );\n\t}\n}\n\nexport async function readFile(p:{ filePath:string }) : Promise<string>\n{\n\treturn new Promise<string>( (resolve,reject)=>\n\t\t{\n\t\t\tfs.readFile( p.filePath, 'utf8', (err,content)=>\n\t\t\t{\n\t\t\t\tif( err )\n\t\t\t\t\treject( err );\n\t\t\t\telse\n\t\t\t\t\tresolve( content );\n\t\t\t} );\n\t\t} );\n}\n\nexport async function writeFile(p:{ filePath:string, stringContent:string }) : Promise<void>\n{\n\treturn new Promise<void>( (resolve,reject)=>\n\t\t{\n\t\t\tfs.writeFile( p.filePath, p.stringContent, (err)=>\n\t\t\t{\n\t\t\t\tif( err )\n\t\t\t\t\treject( err );\n\t\t\t\telse\n\t\t\t\t\tresolve();\n\t\t\t} );\n\t\t} );\n}\n\n/** https://json5.org/ */\nexport async function readJSON<T>(p:{ filePath?:string, jsonText?:string }) : Promise<T>\n{\n\tlet jsonText = p.jsonText;\n\n\tif( p.filePath != null )\n\t\tjsonText = await readFile({ filePath:p.filePath });\n\n\tif( jsonText == null )\n\t\tthrow `'readJSON()': Missing JSON source`;\n\n\treturn JSON5.parse( jsonText );\n}\n\nexport async function writeJSON(p:{ filePath:string, content:any }) : Promise<void>\n{\n\tconst json = JSON.stringify( p.content, null, '\\t' );\n\tawait writeFile({ filePath:p.filePath, stringContent:json });\n}\n\n/** https://stackoverflow.com/questions/10420352/converting-file-size-in-bytes-to-human-readable-string */\nexport function humanFileSize(bytes:number, si?:boolean) : string\n{\n\tif( si == null )\n\t\tsi = false;\n\tconst thresh = si ? 1000 : 1024;\n\tif( Math.abs(bytes) < thresh )\n\t\treturn bytes + ' B';\n\n\tconst units = si\n\t\t? ['kB','MB','GB','TB','PB','EB','ZB','YB']\n\t\t: ['KiB','MiB','GiB','TiB','PiB','EiB','ZiB','YiB'];\n\tlet u = -1;\n\tdo\n\t{\n\t\tbytes /= thresh;\n\t\t++u;\n\t} while( Math.abs(bytes) >= thresh && u < units.length - 1 );\n\treturn bytes.toFixed(1)+' '+units[u];\n}\n\nexport async function readFileLines(filePath:string) : Promise<string[]>\n{\n\tconst buffer = await fs.promises.readFile( filePath );\n\tconst txt = buffer.toString();\n\tconst lines = txt.match( /[^\\r\\n]+/g ) ?? [];\n\treturn lines;\n}\n\nexport function isNullOrWhiteSpace(str?:string) : boolean\n{\n\tif( str == null )\n\t\treturn true;\n\tif( str.length == 0 )\n\t\treturn true;\n\tif( str.trim() == '' )\n\t\treturn true;\n\treturn false;\n}\n\nexport async function forEach<T>(t:T[], callback:(item:T,i:number)=>Promise<void>) : Promise<void>\n{\n\tfor( let i=0; i<t.length; ++i )\n\t\tawait callback( t[i], i );\n}\n\nexport function arraySum<T>(a:T[], f:(e:T)=>number) : number\n{\n\tlet rc = 0;\n\ta.forEach( function(e)\n\t\t{\n\t\t\trc += f(e);\n\t\t} );\n\treturn rc;\n}\n\nexport function arrayToDictionary<T>(a:T[], keyCast:(v:T)=>string) : {[key:string]:T}\n{\n\tconst dict : {[key:string]:T} = {};\n\ta.forEach( v=>\n\t\t{\n\t\t\tdict[ keyCast(v) ] = v\n\t\t} );\n\treturn dict;\n}\n\n/** Split the specified array into multiple arrays according to a grouping key */\nexport function arrayToListOfArrays<T>(a:T[], groupingKeyCast:(v:T)=>string) : T[][]\n{\n\t// Group items into an object \"key->T[]\"\n\tconst grouped = a.reduce<{[key:string]:T[]}>( (accu,current)=>\n\t{\n\t\tconst key = groupingKeyCast( current );\n\t\tlet list = accu[ key ];\n\t\tif( list == null )\n\t\t{\n\t\t\tlist = [];\n\t\t\taccu[ key ] = list;\n\t\t}\n\t\tlist.push( current );\n\t\treturn accu;\n\t}, {} );\n\n\t// From the object, create arrays\n\tconst list : T[][] = [];\n\tfor( let key in grouped )\n\t\tlist.push( grouped[key] );\n\n\treturn list;\n}\n\n/** Throttles the concurrent execution of Promises (e.g. the reduce the number of concurrent requests to a server) */\nexport class TasksThrotther\n{\n\tprivate readonly\tlimit\t\t: number;\n\tprivate\t\t\t\trunnings\t: number = 0;\n\tprivate\t\t\t\tthrottled\t: (()=>void)[] = [];\n\n\tconstructor(limit:number)\n\t{\n\t\tthis.limit = limit;\n\t}\n\n\t/** nb: all the magic is here... */\n\tpublic async do<T>(callback:()=>Promise<T>) : Promise<T>\n\t{\n\t\tconst self = this;\n\n\t\t++ self.runnings;\n\n\t\tif( self.runnings <= self.limit )\n\t\t{\n\t\t\t// Execute immediately\n\t\t\tconst rc = await callback();\n\t\t\tself.checkNext();\n\t\t\treturn rc;\n\t\t}\n\n\t\t// Push a promise in 'throttled' & wait for it\n\t\tconst waitFor = new Promise<void>( (resolve)=>\n\t\t\t{\n\t\t\t\tself.throttled.push( resolve );\n\t\t\t} );\n\t\tawait waitFor;\n\n\t\t// Now we can execute\n\t\tconst rc = await callback();\n\t\tself.checkNext();\n\t\treturn rc;\n\t}\n\n\tprivate checkNext() : void\n\t{\n\t\tconst self = this;\n\n\t\t-- self.runnings;\n\t\tconst next = self.throttled.shift();\n\t\tif( next != null )\n\t\t\tnext();\n\t}\n}\n\nexport namespace url\n{\n\t/** Transform a dictionary like {foo:'bar',hello:'world'} to a parameters string like 'foo=bar&hello=world' */\n\texport function stringifyParameters(parms:{[key:string]:any}) : string\n\t{\n\t\tvar pairs = <string[]>[];\n\t\tObject.keys(parms).forEach( function(key)\n\t\t\t{\n\t\t\t\tlet value = parms[ key ];\n\t\t\t\tkey = encodeURIComponent( key );\n\n\t\t\t\tif( (value == null) || (typeof(value) === 'string') || (typeof(value) === 'number') || (typeof(value) === 'boolean') )\n\t\t\t\t\t{/*Keep as-is*/}\n\t\t\t\telse\n\t\t\t\t\t// Convert to JSON\n\t\t\t\t\tvalue = JSON.stringify( value );\n\t\t\t\tvalue = encodeURIComponent( value );\n\n\t\t\t\tpairs.push( key+\"=\"+value );\n\t\t\t} );\n\t\treturn pairs.join( '&' );\n\t}\n\n\texport function getRequest(url:string, request?:{[key:string]:any}) : Promise<string>\n\t{\n\t\tif( request != null )\n\t\t{\n\t\t\tconst parms = stringifyParameters( request );\n\t\t\turl = `${url}?${parms}`;\n\t\t}\n\n\t\tconst ht = url.startsWith('https:') ? https : http;\n\t\tlet data = '';\n\t\treturn new Promise<string>( (resolve,reject)=>\n\t\t\t{\n\t\t\t\tht.get( url, (resp)=>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresp.on( 'data', (chunk)=>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdata += chunk;\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\tresp.on( 'end', ()=>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif( resp.statusCode != 200 ) // HTTP OK\n\t\t\t\t\t\t\t\t\t\treject( `Request failed with status code ${resp.statusCode}` );\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tresolve( data );\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} )\n\t\t\t\t\t.on( 'error', (err)=>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treject( err );\n\t\t\t\t\t\t} );\n\t\t\t} );\n\t}\n\n\t// nb: ES5 incompatible ; requires \"Promise\" library\n\texport function postRequest<T>(url:string, request:{[key:string]:any}) : Promise<T>\n\t{\n\t\tlet requestStr = JSON.stringify( request );\n\t\treturn new Promise<T>( (resolve,reject)=>\n\t\t\t{\n\t\t\t\t$.ajax({\ttype\t\t: 'POST',\n\t\t\t\t\t\t\turl\t\t\t: url,\n\t\t\t\t\t\t\tcontentType\t: 'application/json',\n\t\t\t\t\t\t\tdata\t\t: requestStr,\n\t\t\t\t\t\t\tdataType\t: 'json',\n\t\t\t\t\t\t\tsuccess\t\t: (data,textStatus,jqXHR)=>resolve( data ),\n\t\t\t\t\t\t\terror\t\t: (jqXHR,textStatus,errorThrown)=>\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\treject( textStatus );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t} );\n\t}\n}\n\nexport namespace html\n{\n\t/** TODO ! */\n\texport function showError(message:string) : void\n\t{\n\t\tconsole.error( message );\n\t}\n\n\t/** TODO ! */\n\texport function showMessage(message:string) : void\n\t{\n\t\talert( message );\n\t}\n\n\t/** Invoke jQuery.blockUI's '.block()' on the specified element but supports multiple invokation on the same element */\n\texport function block($e:JQuery) : JQuery\n\t{\n\t\t// Insert/increment a block counter as jQuery 'data()'\n\t\tvar blockCounter = ( $e.data('common_blockCounter')|0 ) + 1;\n\t\t$e.data( 'common_blockCounter', blockCounter );\n\n\t\tif( blockCounter == 1 )\n\t\t\t// This element is not blocked yet\n\t\t\t(<any>$e).block();  // TODO: ACA: jQuery.blockUI typings ...\n\n\t\treturn $e;\n\t}\n\n\t/** Invoke jQuery.blockUI's '.unblock()' on the specified element except if it has been block()ed more than once */\n\texport function unblock($e:JQuery) : JQuery\n\t{\n\t\t// Decrement the block counter in the jQuery 'data()'\n\t\tvar blockCounter = ( $e.data('common_blockCounter')|0 ) - 1;\n\t\t$e.data( 'common_blockCounter', blockCounter );\n\n\t\tif( blockCounter < 0 )\n\t\t{\n\t\t\t// There is a logic error somewhere...\n\t\t\tshowError( 'INTERNAL ERROR: Unblock count > block count: '+blockCounter );\n\n\t\t\t// Reset counter\n\t\t\tblockCounter = 0;\n\t\t\t$e.data( 'common_blockCounter', 0 );\n\t\t}\n\n\t\tif( blockCounter == 0 )\n\t\t\t// This element is no more blocked by anything else\n\t\t\t(<any>$e).unblock();  // TODO: ACA: jQuery.blockUI typings ...\n\n\t\treturn $e;\n\t}\n\n\texport function contextMenu($triggerControl:JQuery, items:{label:string,callback:()=>void}[]) : void\n\t{\n\t\t$triggerControl.contextmenu( ()=>\n\t\t\t{\n\t\t\t\tlet clickHandler\t: (evt:any)=>void = <any>null;\n\t\t\t\tlet closeMe\t\t\t: ()=>void = <any>null;\n\n\t\t\t\tconst $popup = $('<div style=\"z-index:999;position:absolute;padding:1px;background-color:white;border:1px solid black\"></div>');\n\t\t\t\titems.forEach( item=>\n\t\t\t\t\t{\n\t\t\t\t\t\tvar $item = $('<div style=\"cursor:pointer;white-space:nowrap\"/>')\n\t\t\t\t\t\t\t\t.text( item.label )\n\t\t\t\t\t\t\t\t.click( ()=>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tcloseMe();\n\t\t\t\t\t\t\t\t\t\titem.callback();\n\t\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t$popup.append( $item );\n\t\t\t\t\t} );\n\t\t\t\t$popup.insertAfter( $triggerControl );\n\n\t\t\t\tcloseMe = ()=>\n\t\t\t\t\t{\n\t\t\t\t\t\t$popup.remove();\n\n\t\t\t\t\t\t// Deactivate global click handler\n\t\t\t\t\t\t$(document).unbind( 'mouseup', clickHandler );\n\t\t\t\t\t};\n\t\t\t\tclickHandler = function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(\t(! $popup.is(evt.target))\n\t\t\t\t\t\t&&\t($popup.has(evt.target).length == 0) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Click not inside the popup\n\n\t\t\t\t\t\t\tif(\t($triggerControl.is(evt.target))\n\t\t\t\t\t\t\t||\t($triggerControl.has(evt.target).length != 0) )\n\t\t\t\t\t\t\t\t// Click inside the triggering button => Discard\n\t\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t\tcloseMe();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t// Activate global click handler\n\t\t\t\t$(document).mouseup( clickHandler );\n\t\t\t} );\n\t}\n\n\texport class DropDownDiv\n\t{\n\t\tpublic readonly\t$triggerControl\t: JQuery;\n\t\tpublic readonly\t$content\t\t: JQuery;\n\t\tprivate\t\t\tshown\t\t\t: boolean;\n\t\tpublic readonly\t$popup\t\t\t: JQuery;\n\n\t\tpublic show\t: ()=>void;\n\t\tpublic hide\t: ()=>void;\n\n\t\tconstructor(p:{\t$triggerControl\t: JQuery,\n\t\t\t\t\t\t$content\t\t: JQuery,\n\t\t\t\t\t\tpopupTemplate?\t: string,\n\t\t\t\t\t})\n\t\t{\n\t\t\tvar self = this;\n\t\t\tthis.$triggerControl\t= p.$triggerControl;\n\t\t\tthis.$content\t\t\t= p.$content;\n\t\t\tvar popupTemplate\t\t= (p.popupTemplate != null) ? p.popupTemplate : '<div style=\"z-index:999;position:absolute;display:none;padding:1px\"></div>';\n\t\t\tself.shown\t\t\t\t= false;\n\t\t\tthis.$popup\t\t\t\t= $(popupTemplate)\n\t\t\t\t\t\t\t\t\t\t\t.append( self.$content )\n\t\t\t\t\t\t\t\t\t\t\t.insertAfter( self.$triggerControl );\n\n\t\t\tvar clickHandler = function(evt:any)\n\t\t\t\t{\n\t\t\t\t\tif(\t(! self.$popup.is(evt.target))\n\t\t\t\t\t&&\t(self.$popup.has(evt.target).length == 0) )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Click not inside the popup\n\n\t\t\t\t\t\tif(\t(self.$triggerControl.is(evt.target))\n\t\t\t\t\t\t||\t(self.$triggerControl.has(evt.target).length != 0) )\n\t\t\t\t\t\t\t// Click inside the triggering button => Discard\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\tself.hide();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\tself.show = function()\n\t\t\t{\n\t\t\t\tif( self.shown )\n\t\t\t\t\t// Already shown\n\t\t\t\t\treturn;\n\t\t\t\tself.$popup.slideDown('fast');\n\n\t\t\t\t// Active click handler on the whole document\n\t\t\t\t$(document).mouseup( clickHandler );\n\n\t\t\t\tself.shown = true;\n\t\t\t};\n\n\t\tself.hide = function()\n\t\t\t{\n\t\t\t\tif(! self.shown )\n\t\t\t\t\t// Already hidden\n\t\t\t\t\treturn;\n\t\t\t\tself.$popup.slideUp('fast');\n\n\t\t\t\t// Deactivate global click handler\n\t\t\t\t$(document).unbind( 'mouseup', clickHandler );\n\n\t\t\t\tself.shown = false;\n\t\t\t};\n\n\t\tself.$triggerControl.on('click', function()\n\t\t\t{\n\t\t\t\tif( self.shown )\n\t\t\t\t\tself.hide();\n\t\t\t\telse\n\t\t\t\t\tself.show();\n\t\t\t} );\n\t\tself.$triggerControl.on('keyup',  function(evt:any)\n\t\t\t{\n\t\t\t\tif( evt.keyCode == 27 )  // ESC key pressed\n\t\t\t\t\tself.hide();\n\t\t\t\telse if( evt.keyCode == 40 )  // DOWN key pressed\n\t\t\t\t\tself.show();\n\t\t\t} );\n\t\t}\n\t}\n}\n\nexport namespace events\n{\n\texport interface EventsHandler\n\t{\n\t\tbind\t: (name:string, callback:(evt?:any,p?:any)=>void)=>EventsHandler;\n\t\tunbind\t: (name:string, callback?:(evt?:any,p?:any)=>void)=>EventsHandler;\n\t\ttrigger\t: (name:string, p?:any)=>EventsHandler;\n\t}\n\n\texport function createEventHandler() : EventsHandler\n\t{\n\t\treturn $({});\n\t}\n\n\t/** Creates an 'onXXX()' function for event binding */\n\texport function eventBind<Self,T>(eventName:string, events:EventsHandler, self:Self) : (callback:(p:T)=>void, p?:{executeOnce?:boolean})=>Self\n\t{\n\t\treturn function(callback:(p:T)=>void, pp?:{executeOnce?:boolean}) : Self\n\t\t{\n\t\t\tvar handler : (evt:any,p:T)=>void;\n\t\t\thandler = function(evt:any,p:T)\n\t\t\t\t{\n\t\t\t\t\tif( pp?.executeOnce == true )\n\t\t\t\t\t\t// Unregister myself\n\t\t\t\t\t\tevents.unbind( eventName, handler );\n\n\t\t\t\t\ttry { callback( p ); }\n\t\t\t\t\tcatch( ex ) { console.error( 'Unexpected error:', ex ); }\n\t\t\t\t};\n\t\t\tevents.bind( eventName, handler );\n\t\t\treturn self;\n\t\t};\n\t}\n\t/** Creates a 'triggerXXX()' function for event triggering */\n\texport function eventTrigger<T>(eventName:string, events:EventsHandler) : (p:T)=>void\n\t{\n\t\treturn function(p) : void\n\t\t\t{\n\t\t\t\tevents.trigger( eventName, p );\n\t\t\t};\n\t}\n} // namespace events\n","\nimport * as moment from 'moment';\n\nclass Log\n{\n\tpublic readonly\tparent?\t\t: Log;\n\tpublic readonly\tname\t\t: string;\n\tpublic readonly\tnameFull\t: string;\n\tpublic readonly\tlines\t\t: LogLine[];\n\n\tpublic readonly onLineAdded?: (name:string, date:Date, message:any[])=>void;\n\n\tconstructor(name:string, parent?:Log, onLineAdded?:(name:string, date:Date, message:any[])=>void)\n\t{\n\t\tthis.parent = parent;\n\t\tthis.name = name;\n\t\tthis.nameFull = this.getFullName();\n\t\tthis.lines = [];\n\n\t\tthis.onLineAdded = onLineAdded;\n\t}\n\n\tpublic log(...optionalParams: any[]) : void\n\t{\n\t\tlet args : any[] = Array.prototype.slice.call( arguments );\n\t\tlet line = { date:new Date(), message:args };\n\t\tthis.lines.push( line );\n\n\t\tif( this.onLineAdded != null )\n\t\t\tthis.onLineAdded( this.nameFull, line.date, line.message );\n\t}\n\n\tpublic logLines(text:string) : void\n\t{\n\t\tif( text == null )\n\t\t{\n\t\t\tthis.log( '<NULL>' );\t\n\t\t\treturn;\n\t\t}\n\t\tvar lines = text.split( '\\n' );\n\t\tfor( let i in lines )\n\t\t\tthis.log( lines[i] );\n\t}\n\n\tpublic exception(ex:any) : void\n\t{\n\t\tthis.log( '*** EXCEPTION:', ex );\n\t}\n\n\tpublic child(name:string) : Log\n\t{\n\t\tlet l = new Log( name, this, this.onLineAdded );\n\t\tthis.lines.push({ date:new Date(), child:l });\n\t\treturn l;\n\t}\n\n\tpublic output() : void\n\t{\n\t\tfor( let i in this.lines )\n\t\t{\n\t\t\tlet line = this.lines[i];\n\t\t\tif( line.child != null )\n\t\t\t{\n\t\t\t\tline.child.output();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlet args = line.message.slice();\n\t\t\t\targs.unshift( this.nameFull+':' );\n\t\t\t\targs.unshift( dateString(line.date) );\n\t\t\t\tconsole.log.apply( console, args );\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getFullName() : string\n\t{\n\t\tlet name = this.name;\n\t\tfor( let l = this.parent; l != null; l = l.parent )\n\t\t\tname = l.name+'.'+name;\n\t\treturn name;\n\t}\n}\n\ntype LogLine = { date: Date,\tmessage\t: any[],\tchild?: never\t}\n\t\t\t | { date: Date,\tmessage?: never,\tchild : Log\t\t}\n\nfunction dateString(d:Date) : string\n{\n\treturn moment( d ).format( 'YYYY-MM-DD HH:mm:ss.SSS' );\n}\n\nexport default Log;\n","\nimport * as path from 'path';\nimport * as url from 'url';\nimport * as electron from 'electron';\nimport Log from './logger';\nimport * as common from './common';\nimport * as btrfs from './btrfs';\n\nexport var koDirectory\t\t: KnockoutObservable<string>;\nexport var koName\t\t\t: KnockoutObservable<string>;\nexport var koUseSudo\t\t: KnockoutObservable<boolean>;\nexport var koReverse\t\t: KnockoutObservable<boolean>;\nexport var koThrottler\t\t: KnockoutObservable<number>;\nexport var koSnapshots\t\t: KnockoutObservable<Snapshots>;\nexport var koHumanReadable\t: KnockoutObservable<boolean>;\nexport var koSelectAll\t\t: KnockoutObservable<boolean>;\n\nexport async function main(p:{ $container:JQuery }) : Promise<void>\n{\n\tconst self = this;\n\tawait trycatch( 'main', async (log)=>\n\t{\n\t\tcommon.init({ log:log });\n\n\t\tkoDirectory\t\t= ko.observable( '/path/to/snapshots/' );\n\t\tkoName\t\t\t= ko.observable( 'bosun' );\n\t\tkoUseSudo\t\t= ko.observable( true );\n\t\tkoReverse\t\t= ko.observable( true );\n\t\tkoThrottler\t\t= ko.observable( 10 );\n\t\tkoSnapshots\t\t= ko.observable( null );\n\t\tkoHumanReadable\t= ko.observable( true );\n\t\tkoSelectAll\t\t= ko.observable( true );\n\n\t\tkoThrottler.subscribe( (v)=>\n\t\t\t{\n\t\t\t\tconst n = parseInt( <any>v );\n\t\t\t\tif( n > 0 )\n\t\t\t\t\tkoThrottler( n );\n\t\t\t\telse\n\t\t\t\t\tkoThrottler( 10 );\n\t\t\t} );\n\n\t\tkoSelectAll.subscribe( (v)=>\n\t\t\t{\n\t\t\t\tfor( const entry of koSnapshots().entries() )\n\t\t\t\t\tentry.checked( v );\n\t\t\t} );\n\n\t\tlog.log( 'Apply Knockout bindings' );\n\t\tko.applyBindings( self, p.$container[0] );\n\t} );\n}\n\nclass Snapshots\n{\n\tpublic readonly\t\tentries\t\t: KnockoutObservableArray<{checked:KnockoutObservable<boolean>,entry:btrfs.SnapshotEntry}>;\n\tpublic readonly\t\truns\t\t: KnockoutObservableArray<Run[]>;\n\n\tprotected readonly\theaders\t\t: KnockoutComputed<string[]>;\n\tprotected readonly\tfooters\t\t: KnockoutComputed<string[]>;\n\tprotected readonly\tbody\t\t: KnockoutComputed<Cell[][]>;\n\n\tconstructor(p:{ entries:btrfs.SnapshotEntry[] })\n\t{\n\t\tconst self = this;\n\n\t\tthis.entries\t= ko.observableArray( p.entries.map( entry=>({ checked:ko.observable(true), entry }) ) );\n\t\tthis.runs\t\t= ko.observableArray( [] );\n\n\t\tthis.headers\t= ko.computed( ()=>self.getHeaders() );\n\t\tthis.footers\t= ko.computed( ()=>self.getFooters() );\n\t\tthis.body\t\t= ko.computed( ()=>self.getBody() );\n\t}\n\n\tprivate getHeaders() : string[]\n\t{\n\t\tconst self = this;\n\t\tconst headers : string[] = [ 'Subvolume' ];\n\t\tfor( const i in self.runs() )\n\t\t\theaders.push( `${parseInt(i)+1}` );\n\t\treturn headers;\n\t}\n\n\tprivate getFooters() : string[]\n\t{\n\t\tconst self = this;\n\t\tlet footers : string[] = [ 'Total ' ];\n\n\t\tconst strRuns = self.runs().map( (runsList)=>\n\t\t\t{\n\t\t\t\tlet total = 0;\n\t\t\t\tfor( const run of runsList )\n\t\t\t\t{\n\t\t\t\t\tif( run.running() || (run.size() == null) )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\ttotal += run.size();\n\t\t\t\t}\n\t\t\t\treturn koHumanReadable() ? common.humanFileSize(total) : (''+total);\n\t\t\t} );\n\t\tfooters = footers.concat( strRuns );\n\n\t\treturn footers;\n\t}\n\n\tprivate getBody() : Cell[][]\n\t{\n\t\tconst self = this;\n\n\t\tconst names = self.entries().map( v=>v.entry.subvolumeName );\n\n\t\tconst columns : Cell[][] = [];\n\n\t\t// Add labels' column\n\t\tconst labelsColumn = self.entries()\n\t\t\t\t\t\t\t\t\t.map( v=> new Cell({ txt:v.entry.subvolumeName, checked:v.checked }) );\n\t\tcolumns.push( labelsColumn );\n\n\t\t// Add runs' columns\n\t\tfor( const runsList of self.runs() )\n\t\t{\n\t\t\tconst runsDict = common.arrayToDictionary( runsList, v=>v.child.subvolumeName );\n\n\t\t\tconst column : Cell[] = [];\n\t\t\tfor( let i in names )\n\t\t\t{\n\t\t\t\tconst name = names[ i ];\n\t\t\t\tconst run = runsDict[ name ];\n\t\t\t\tconst cell = ( run == null )\n\t\t\t\t\t\t\t\t? new Cell({ txt:'' })\n\t\t\t\t\t\t\t\t: new Cell({ koTxt:ko.computed( ()=>\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst size = run.size();\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst strSize = ( size == null )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? ''\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: koHumanReadable()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? common.humanFileSize( size )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: ''+size;\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn strSize;\n\t\t\t\t\t\t\t\t\t\t\t\t} ), running:run.running });\n\t\t\t\tcolumn[ i ] = cell;\n\t\t\t}\n\n\t\t\tcolumns.push( column );\n\t\t}\n\n\t\tconst table : Cell[][] = labelsColumn.map( v=>columns.map( w=>null ) );\n\t\tfor( let x in columns )\n\t\tfor( let y in names )\n\t\t\ttable[y][x] = columns[x][y];\n\n\t\treturn table;\n\t}\n}\nclass Cell\n{\n\tpublic readonly text\t\t: KnockoutComputed<string>;\n\tpublic readonly checked?\t: KnockoutObservable<boolean>;\n\tpublic readonly showChecked\t: KnockoutComputed<boolean>;\n\tpublic readonly running\t\t: KnockoutComputed<boolean>;\n\tpublic readonly rowSpan\t\t: KnockoutObservable<number>;\n\n\tconstructor(p:{ txt?:string, koTxt?:KnockoutObservable<string>, checked?:KnockoutObservable<boolean>, running?:KnockoutObservable<boolean> })\n\t{\n\t\tconst self = this;\n\n\t\tthis.text\t\t\t= ko.computed( ()=> (p.koTxt != null) ? p.koTxt() : p.txt );\n\t\tthis.checked\t\t= p.checked;\n\t\tthis.showChecked\t= ko.computed( ()=>(self.checked != null) );\n\t\tthis.running\t\t= ko.computed( ()=> (p.running == null) ? false : p.running() );\n\t\tthis.rowSpan\t\t= ko.observable( 1 );\n\t}\n}\nclass Run\n{\n\tpublic\tparent\t: btrfs.SnapshotEntry;\n\tpublic\tchild\t: btrfs.SnapshotEntry;\n\tpublic\trunning\t: KnockoutObservable<boolean>;\n\tpublic\tsize\t: KnockoutObservable<number>;\n\n\tconstructor(parent:btrfs.SnapshotEntry, child:btrfs.SnapshotEntry)\n\t{\n\t\tthis.parent\t\t= parent;\n\t\tthis.child\t\t= child;\n\t\tthis.running\t= ko.observable( false );\n\t\tthis.size\t\t= ko.observable( null );\n\t}\n\tpublic async launch(log:Log) : Promise<number>\n\t{\n\t\tconst self = this;\n\n\t\tself.size( null );\n\t\tself.running( true );\n\n\t\tconst size = await btrfs.snapshotSize({ log, parent:self.parent, child:self.child });\n\n\t\tself.running( false );\n\t\tself.size( size );\n\n\t\treturn size;\n\t}\n}\n\nexport async function clickRefresh() : Promise<void>\n{\n\tawait trycatch( 'refresh', async (log)=>\n\t{\n\t\tkoSnapshots( null );\n\n\t\tbtrfs.config.useSudo = koUseSudo();\n\t\tconst { list } = await btrfs.listSnapshots({\tlog\t\t: log.child('list'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname\t: koName(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdir\t\t: koDirectory(),\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\tif( koReverse() )\n\t\t\tlist.reverse();\n\t\tconst snapshots = new Snapshots({ entries:list })\n\t\tkoSnapshots( snapshots );\n\t} );\n}\n\nexport async function clickLaunch() : Promise<void>\n{\n\tconst n = koSnapshots().runs().length + 1;\n\tawait trycatch( `run_${n}`, async (log)=>\n\t{\n\t\tlog.log( 'Throttler:', koThrottler() );\n\t\tconst throttler = new common.TasksThrotther( koThrottler() );\n\n\t\tconst entries = koSnapshots().entries().filter( (entry)=>entry.checked() );\n\t\tlog.log( `Launching '${entries.length-1}' runs` );\n\t\tconst tasks : Promise<number>[] = [];\n\t\tconst runs : Run[] = [];\n\t\tfor( let i=1; i<entries.length; ++i )\n\t\t{\n\t\t\tconst parent = entries[ i-1 ].entry;\n\t\t\tconst child = entries[ i ].entry;\n\t\t\tconst run = new Run( parent, child );\n\t\t\ttasks.push( throttler.do( ()=>run.launch(log.child(''+i)) ) );\n\t\t\truns.push( run );\n\t\t}\n\n\t\tlog.log( `Append runs` );\n\t\tkoSnapshots().runs.push( runs );\n\n\t\tlog.log( `Waiting for tasks to terminate` );\n\t\tawait Promise.all( tasks );\n\t} );\n}\n\nasync function trycatch(logName:string, callback:(log:Log)=>Promise<void>) : Promise<void>\n{\n\tconst log = new Log( logName, /*parent*/null, /*onLineAdded*/(name,date,args)=>\n\t\t{\n\t\t\tconst a = args.slice();\n\t\t\ta.unshift( name+':' );\n\t\t\tconsole.log.apply( console, a );\n\t\t} );\n\tlog.log( '*** start' );\n\ttry\n\t{\n\t\tawait callback( log );\n\t\tlog.log( '*** exit' );\n\t}\n\tcatch( ex )\n\t{\n\t\tlog.exception( ex );\n\t\tcommon.setHasErrors();\n\t}\n\tlog.log( '*** end ; hasErrors', common.hasErrors );\n\n\tconsole.log( '=====' );\n\tlog.output()\n}\n\n// Entry points\nif( electron.app == null )\n{\n\t// Within HTML => Register this module as 'application'\n\t(<any>window)['application'] = this;\n}\nelse\n{\n\t// Within Electron CLI => Open window\n\telectron.app.once( 'ready', ()=>\n\t\t{\n\t\t\tconst log = new Log( 'electron', /*parent*/null, /*onLineAdded*/(name,date,args)=>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst a = args.slice();\n\t\t\t\t\t\t\ta.unshift( name+':' );\n\t\t\t\t\t\t\tconsole.log.apply( console, a );\n\t\t\t\t\t\t} );\n\n\t\t\t// Create a new window\n\t\t\tconst window = new electron.BrowserWindow({\twidth: 1024,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\theight: 768,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitleBarStyle: 'hiddenInset',\n\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\tconst loadPage = function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twindow.loadURL( url.format({\n\t\t\t\t\t\t\t\t\t\t\t\tpathname: path.join(__dirname, 'snapshotsSizeGui.html'),\n\t\t\t\t\t\t\t\t\t\t\t\tprotocol: 'file:',\n\t\t\t\t\t\t\t\t\t\t\t\tslashes: true,\n\t\t\t\t\t\t\t\t\t\t\t}) );\n\t\t\t\t\t\t};\n\n\t\t\tconst menu = new electron.Menu();\n\t\t\tmenu.append( new electron.MenuItem({ label:'show devtools', click:()=>{ window.webContents.openDevTools(); } }) );\n\t\t\tmenu.append( new electron.MenuItem({ label:'refresh', click:()=>{ loadPage(); } }) );\n\t\t\twindow.setMenu( menu );\n\n\t\t\twindow.webContents.openDevTools();\n\n\t\t\tloadPage();\n\t\t} );\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}